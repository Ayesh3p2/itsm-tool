name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Run security audit
        run: npm audit

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build backend
        run: |
          cd backend
          npm run build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Build and push Docker image
        run: |
          cd backend
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/itsm-backend .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/itsm-backend

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy itsm-backend \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/itsm-backend \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "MONGODB_URI=${{ secrets.MONGODB_URI }},
              JWT_SECRET=${{ secrets.JWT_SECRET }},
              SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }},
              SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }},
              EMAIL_USER=${{ secrets.EMAIL_USER }},
              EMAIL_PASS=${{ secrets.EMAIL_PASS }},
              FRONTEND_URL=${{ secrets.FRONTEND_URL }},
              SLACK_APPROVAL_CHANNEL=${{ secrets.SLACK_APPROVAL_CHANNEL }},
              MONGODB_SSL_CA=${{ secrets.MONGODB_SSL_CA }},
              MONGODB_SSL_CERT=${{ secrets.MONGODB_SSL_CERT }},
              MONGODB_SSL_KEY=${{ secrets.MONGODB_SSL_KEY }},
              MONGODB_SSL_PASS=${{ secrets.MONGODB_SSL_PASS }}"

      - name: Verify deployment
        run: |
          sleep 30 # Wait for deployment to complete
          curl -s https://${{ secrets.CLOUD_RUN_URL }} | grep -q "Welcome" || exit 1

  monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Set up monitoring
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install monitoring tools
        run: npm install -g newrelic

      - name: Configure New Relic
        env:
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          NEW_RELIC_APP_NAME: "ITSM Tool"
        run: |
          newrelic enable

      - name: Configure Datadog
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY: ${{ secrets.DATADOG_APP_KEY }}
        run: |
          npm install -g datadog-metrics
          datadog configure

      - name: Set up alerts
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"name": "High CPU Usage", "conditions": [{"metric": "cpu.usage", "operator": ">", "threshold": 80}]}' \
            https://api.datadoghq.com/api/v1/monitor

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run OWASP ZAP scan
        uses: zaproxy/action@v1
        with:
          target: ${{ secrets.FRONTEND_URL }}
          spider: true
          api: true

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: template
          template: @contrib/sarif.tpl
          output: trivy-results.sarif
